apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: default
  name: pod-admin
rules:
  - apiGroups: [""] # "" indicates the core API group
    resources: ["pods", "pods/log"]
    verbs: ["create", "list", "get", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
# This role binding allows "jane" to read pods in the "default" namespace.
# You need to already have a Role named "pod-reader" in that namespace.
kind: RoleBinding
metadata:
  name: admin-pods
  namespace: default
subjects:
  # You can specify more than one "subject"
  - kind: User
    name: suhairi # "name" is case sensitive
    apiGroup: rbac.authorization.k8s.io
roleRef:
  # "roleRef" specifies the binding to a Role / ClusterRole
  kind: Role #this must be Role or ClusterRole
  name: pod-admin # this must match the name of the Role or ClusterRole you wish to bind to
  apiGroup: rbac.authorization.k8s.io
# /.kub/config
# openssl genrsa -out suhairi.key 2048

# openssl req -new -key suhairi.key -out suhairi.csr -subj "/CN=suhairi/O=dev/O=example.org"

# openssl x509 -req -CA  /etc/kubernetes/pki/ca.crt -CAkey /etc/kubernetes/pki/ca.key -CAcreateserial -days 730 -in suhairi.csr -out suhairi.crt
# kubectl config set-credentials suhairi --client-certificate=suhairi.crt --client-key=suhairi.key
# kubectl config set-context suhairi-kubernetes --cluster=kubernetes --user=suhairi --namespace=default
# kubectl config get-contexts
# kubectl config use-context
# kubectl api-resources -o wide | grep pod
